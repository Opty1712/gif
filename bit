<div id="calculator"><h1>Had I bought bitcoin for $<input type="number" id="dollars" value="1000" placeholder=""> on <input type="date" id="date" value="2010-10-15" min="2010-07-17" max="2022-04-05"> <br> I would have <input disabled="" type="text" id="dollars-result" value="" placeholder="$ USD"> right now. </h1><a href="#" id="calculate" class="button">Calculate!</a><h2 id="txt"> </h2><a id="tweet" href="" target="_blank">Tweet This Result</a><div id="calculating"><img src="/cube.gif"><h2>Calculating</h2></div></div>
<script src="https://bitcoinfomo.club/js/jquery.min.js"></script>
<script>
jQuery(function($) {

  $("#calculate").on("click", function(e) {
    $("#calculating").show();

    var date = $("#date").val();
    var money = $("#dollars").val();

    $.ajax({
      type: "GET",
      url: "https://bitcoinfomo.club/price/",
      data: {
        dollars: money,
        date: date
      },
      success: function(data) {
        setTimeout(function() {
          $("#dollars-result").val("$"+parseFloat(data).toFixed(2));
          $("#calculating").fadeOut();

          setTimeout(function() {
            var txt = "That's " + numToWords(parseInt(data)) + " US Dollars.";
            $("#txt").text(txt).fadeIn();

          }, 1000);

        }, 2000);
      }
    });

    e.preventDefault();
  });




var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var arr = function arr(x) {
  return Array.from(x);
};
var num = function num(x) {
  return Number(x) || 0;
};
var str = function str(x) {
  return String(x);
};
var isEmpty = function isEmpty(xs) {
  return xs.length === 0;
};
var take = function take(n) {
  return function (xs) {
    return xs.slice(0, n);
  };
};
var drop = function drop(n) {
  return function (xs) {
    return xs.slice(n);
  };
};
var reverse = function reverse(xs) {
  return xs.slice(0).reverse();
};
var comp = function comp(f) {
  return function (g) {
    return function (x) {
      return f(g(x));
    };
  };
};
var not = function not(x) {
  return !x;
};
var chunk = function chunk(n) {
  return function (xs) {
    return isEmpty(xs) ? [] : [take(n)(xs)].concat(_toConsumableArray(chunk(n)(drop(n)(xs))));
  };
};

// numToWords :: (Number a, String a) => a -> String
var numToWords = function numToWords(n) {

  var a = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];

  var b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

  var g = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion'];

  // this part is really nasty still
  // it might edit this again later to show how Monoids could fix this up
  var makeGroup = function makeGroup(_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        ones = _ref2[0],
        tens = _ref2[1],
        huns = _ref2[2];

    return [num(huns) === 0 ? '' : a[huns] + ' hundred ', num(ones) === 0 ? b[tens] : b[tens] && b[tens] + '-'  '', a[tens + ones]  a[ones]].join('');
  };

  var thousand = function thousand(group, i) {
    return group === '' ? group : group + ' ' + g[i];
  };
